
import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export interface SupabaseService {
  id: string;
  nome: string;
  categoria: 'corte' | 'coloracao' | 'tratamento' | 'finalizacao' | 'outros';
  preco: number;
  duracao: number;
  ativo: boolean;
  created_at?: string;
}

export const useSupabaseServices = () => {
  const [services, setServices] = useState<SupabaseService[]>([]);
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const fetchServices = async () => {
    try {
      console.log('üîÑ [useSupabaseServices] Fetching services from Supabase...');
      const { data, error } = await supabase
        .from('servicos')
        .select('*')
        .order('nome');

      if (error) {
        console.error('‚ùå [useSupabaseServices] Error fetching services:', error);
        throw error;
      }
      
      console.log('‚úÖ [useSupabaseServices] Services fetched successfully:', data);
      setServices((data || []) as SupabaseService[]);
    } catch (error: any) {
      console.error('‚ùå [useSupabaseServices] Error in fetchServices:', error);
      toast({
        title: "Erro ao carregar servi√ßos",
        description: error.message || "N√£o foi poss√≠vel carregar a lista de servi√ßos.",
        variant: "destructive",
      });
    }
  };

  const addService = async (serviceData: Omit<SupabaseService, 'id' | 'created_at'>): Promise<boolean> => {
    setLoading(true);
    try {
      console.log('‚ûï [useSupabaseServices] Creating service:', serviceData);
      
      const { error } = await supabase
        .from('servicos')
        .insert([serviceData]);

      if (error) {
        console.error('‚ùå [useSupabaseServices] Error creating service:', error);
        throw error;
      }

      console.log('‚úÖ [useSupabaseServices] Service created successfully');
      
      toast({
        title: "Servi√ßo criado!",
        description: "Novo servi√ßo foi adicionado com sucesso.",
      });

      return true;
    } catch (error: any) {
      console.error('‚ùå [useSupabaseServices] Error in addService:', error);
      toast({
        title: "Erro ao criar servi√ßo",
        description: error.message || "N√£o foi poss√≠vel criar o servi√ßo.",
        variant: "destructive"
      });
      return false;
    } finally {
      setLoading(false);
    }
  };

  const updateService = async (serviceId: string, serviceData: Partial<SupabaseService>): Promise<boolean> => {
    setLoading(true);
    try {
      console.log('‚úèÔ∏è [useSupabaseServices] Updating service:', serviceId, serviceData);
      
      const { error } = await supabase
        .from('servicos')
        .update(serviceData)
        .eq('id', serviceId);

      if (error) {
        console.error('‚ùå [useSupabaseServices] Error updating service:', error);
        throw error;
      }

      console.log('‚úÖ [useSupabaseServices] Service updated successfully');
      
      toast({
        title: "Servi√ßo atualizado!",
        description: "As informa√ß√µes do servi√ßo foram atualizadas.",
      });

      return true;
    } catch (error: any) {
      console.error('‚ùå [useSupabaseServices] Error in updateService:', error);
      toast({
        title: "Erro ao atualizar servi√ßo",
        description: error.message || "N√£o foi poss√≠vel atualizar o servi√ßo.",
        variant: "destructive",
      });
      return false;
    } finally {
      setLoading(false);
    }
  };

  const deleteService = async (serviceId: string): Promise<boolean> => {
    setLoading(true);
    try {
      console.log('üóëÔ∏è [useSupabaseServices] Deleting service (soft delete):', serviceId);
      
      // Soft delete - marca como inativo ao inv√©s de excluir
      const { error } = await supabase
        .from('servicos')
        .update({ ativo: false })
        .eq('id', serviceId);

      if (error) {
        console.error('‚ùå [useSupabaseServices] Error deleting service:', error);
        throw error;
      }

      console.log('‚úÖ [useSupabaseServices] Service deleted successfully');
      
      toast({
        title: "Servi√ßo removido",
        description: "O servi√ßo foi desativado do sistema.",
      });

      return true;
    } catch (error: any) {
      console.error('‚ùå [useSupabaseServices] Error in deleteService:', error);
      toast({
        title: "Erro ao remover servi√ßo",
        description: error.message || "N√£o foi poss√≠vel remover o servi√ßo.",
        variant: "destructive",
      });
      return false;
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    console.log('üöÄ [useSupabaseServices] Hook initialized, setting up real-time subscription...');
    
    // Buscar dados iniciais
    fetchServices();

    // Configurar listener para mudan√ßas em tempo real
    const channel = supabase
      .channel('admin-services-changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'servicos'
        },
        (payload) => {
          console.log('üì° [useSupabaseServices] Real-time change detected:', payload);
          
          // Refetch services quando houver mudan√ßas para garantir sincroniza√ß√£o
          fetchServices();
        }
      )
      .subscribe((status) => {
        console.log('üì° [useSupabaseServices] Subscription status:', status);
      });

    return () => {
      console.log('üßπ [useSupabaseServices] Cleaning up real-time subscription');
      supabase.removeChannel(channel);
    };
  }, []);

  return {
    services,
    loading,
    addService,
    updateService,
    deleteService,
    fetchServices,
  };
};
